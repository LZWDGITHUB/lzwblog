[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:$}=Object,{fromEntries:st}=Object,nt="ENTRIES",D="KEYS",W="VALUES",_="";class F{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(typeof t!="string")return n;const o=t.length+1,r=o+s,i=new Uint8Array(r*o).fill(s+1);for(let c=0;c<o;++c)i[c]=c;for(let c=1;c<r;++c)i[c*o]=c;return q(e,t,s,n,i,1,o,""),n},q=(e,t,s,n,o,r,i,c)=>{const h=r*i;t:for(const u of e.keys())if(u===_){const d=o[h-1];d<=s&&n.set(c,[e.get(u),d])}else{let d=r;for(let a=0;a<u.length;++a,++d){const m=u[a],g=i*d,y=g-i;let l=o[g];const f=Math.max(0,d-s-1),w=Math.min(i-1,d+s);for(let p=f;p<w;++p){const C=m!==t[p],S=o[y+p]+ +C,I=o[y+p+1]+1,x=o[g+p]+1,k=o[g+p+1]=Math.min(S,I,x);k<l&&(l=k)}if(l>s)continue t}q(e.get(u),t,s,n,o,d,i,c+u)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=M(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const i of o.keys())if(i!==_&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),o.get(i)),new z(c,t)}}return new z(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,rt(this._tree,t)}entries(){return new F(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=v(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return v(this._tree,t)?.has(_)??!1}keys(){return new F(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new F(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new z;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return z.from(Object.entries(t))}}const M=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),M(e.get(n),t.slice(n.length),s);return s.push([e,t]),M(void 0,"",s)},v=(e,t)=>{if(t.length===0||!e)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return v(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const i=Math.min(s-n,r.length);let c=1;for(;c<i&&t[n+c]===r[c];)++c;const h=e.get(r);if(c===r.length)e=h;else{const u=new Map;u.set(r.slice(c),h),e.set(t.slice(n,n+c),u),e.delete(r),e=u}n+=c;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},rt=(e,t)=>{const[s,n]=M(e,t);if(s!==void 0){if(s.delete(_),s.size===0)A(n);else if(s.size===1){const[o,r]=s.entries().next().value;R(n,o,r)}}},A=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)A(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&R(e.slice(0,-1),n,o)}},R=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},ct=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ut="and_not",dt=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,ht=()=>new Map,O=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,H={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:i,match:c}=t.get(n);B(o.terms,i),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,c)})}return s},[ut]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},lt=(e,t,s,n,o,r)=>{const{k:i,b:c,d:h}=r;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-c+c*n/o)))},ft=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},at=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,ht),r=o.get(t),i=r?.get(s);!r||typeof i>"u"?J(e,s,t,n):i<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,i-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ct),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},Y={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},K={minDirtFactor:.1,minDirtCount:20},yt={..._t,...K},U=Symbol("*"),wt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const i=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},Q=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase();if(!(s in H))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(H[s])},T=(e,t,s,n,o,r,i,c,h,u=new Map)=>{if(r==null)return u;for(const d of Object.keys(i)){const a=i[d],m=e._fieldIds[d],g=r.get(m);if(g==null)continue;let y=g.size;const l=e._avgFieldLength[m];for(const f of g.keys()){if(!e._documentIds.has(f)){at(e,m,f,s),y-=1;continue}const w=c?c(e._documentIds.get(f),s,e._storedFields.get(f)):1;if(!w)continue;const p=g.get(f),C=e._fieldLength.get(f)[m],S=lt(p,y,e._documentCount,C,l,h),I=n*o*a*w*S,x=u.get(f);if(x){x.score+=I,dt(x.terms,t);const k=G(x.match,s);k?k.push(d):x.match[s]=[d]}else u.set(f,{score:I,terms:[t],match:{[s]:[d]}})}}return u},xt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:h}=n,{fuzzy:u,prefix:d}={...Y.weights,...i},a=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,a,o,r,h);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(c,Math.round(t.term.length*l)):l;f&&(y=e._index.fuzzyGet(t.term,f))}if(g)for(const[l,f]of g){const w=l.length-t.term.length;if(!w)continue;y?.delete(l);const p=d*l.length/(l.length+.3*w);T(e,t.term,l,p,t.termBoost,f,o,r,h,m)}if(y)for(const l of y.keys()){const[f,w]=y.get(l);if(!w)continue;const p=u*l.length/(l.length+w);T(e,t.term,l,p,t.termBoost,f,o,r,h,m)}return m},X=(e,t,s={})=>{if(t===U)return wt(e,s);if(typeof t!="string"){const d={...s,...t,queries:void 0},a=t.queries.map(m=>X(e,m,d));return Q(a,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,i={tokenize:n,processTerm:o,...r,...s},{tokenize:c,processTerm:h}=i,u=c(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>xt(e,d,i));return Q(u,i.combineWith)},Z=(e,t,s={})=>{const{searchOptions:n}=e._options,o={...n,...s},r=X(e,t,s),i=[];for(const[c,{score:h,terms:u,match:d}]of r){const a=u.length||1,m={id:e._documentIds.get(c),score:h*a,terms:Object.keys(d),queryTerms:u,match:d};Object.assign(m,e._storedFields.get(c)),(o.filter==null||o.filter(m))&&i.push(m)}return t===U&&o.boostDocument==null||i.sort(P),i},zt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:i}of Z(e,t,s)){const c=i.join(" "),h=n.get(c);h!=null?(h.score+=r,h.count+=1):n.set(c,{score:r,terms:i,count:1})}const o=[];for(const[r,{score:i,terms:c,count:h}]of n)o.push({suggestion:r,terms:c,score:i/h});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...Y,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=K,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,i]of n)o[r]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const kt=e=>new bt(e),It=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=kt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=s,c._avgFieldLength=n,c._dirtCount=o??0,c._index=new z,c},Mt=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,i=It(e,t);i._documentIds=O(n),i._fieldLength=O(o),i._storedFields=O(r);for(const[c,h]of i._documentIds)i._idToShortId.set(h,c);for(const[c,h]of s){const u=new Map;for(const d of Object.keys(h))u.set(parseInt(d,10),O(h[d]));i._index.set(c,u)}return i},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,i=0;const c=(u,d=!1)=>{let a;i===0?a=u.length>20?`… ${u.slice(-20)}`:u:d?a=u.length+i>100?`${u.slice(0,100-i)}… `:u:a=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,a&&o.push(a),i+=a.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,r);if(h===-1)return null;for(;h>=0;){const u=h+n.length;if(c(e.slice(r,h)),r=u,i>100)break;h=s.indexOf(n,r)}return i<100&&c(e.slice(r),!0),o},Ot=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ct=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),tt=(e,t,s={})=>{const n={};return Z(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:i,score:c}=o,h=r.includes("@"),u=r.includes("#"),[d,a]=r.split(/[#@]/),m=Number(d),g=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(w=>!w.includes(l))),{contents:y}=n[m]??={title:"",contents:[]};if(h)y.push([{type:"customField",id:m,index:a,display:g.map(l=>o.c.map(f=>V(f,l))).flat().filter(l=>l!==null)},c]);else{const l=g.map(f=>V(o.h,f)).filter(f=>f!==null);if(l.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:a},display:l},c]),"t"in o&&o.t)for(const f of o.t){const w=g.map(p=>V(f,p)).filter(p=>p!==null);w.length&&y.push([{type:"text",id:m,...u&&{anchor:a},display:w},c])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Ot(o,r):Ct(o,r)).map(([o,{title:r,contents:i}])=>{if(!r){const c=it(t,o);c&&(r=c.h)}return{title:r,contents:i.map(([c])=>c)}})},et=(e,t,s={})=>{const n=zt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},St=st($(JSON.parse("{\"/\":{\"documentCount\":44,\"nextId\":44,\"documentIds\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"1#项目启动\",\"3\":\"1#项目更新\",\"4\":\"2\",\"5\":\"2#一、flex-布局是什么\",\"6\":\"2#二、基本概念\",\"7\":\"2#三、容器的属性\",\"8\":\"2#_3-1-flex-direction属性\",\"9\":\"2#_3-2-flex-wrap属性\",\"10\":\"2#_3-3-flex-flow\",\"11\":\"2#_3-4-justify-content属性\",\"12\":\"2#_3-5-align-items属性\",\"13\":\"2#_3-6-align-content属性\",\"14\":\"2#四、项目的属性\",\"15\":\"2#_4-1-order属性\",\"16\":\"2#_4-2-flex-grow属性\",\"17\":\"2#_4-3-flex-shrink属性\",\"18\":\"2#_4-4-flex-basis属性\",\"19\":\"2#_4-5-flex属性\",\"20\":\"2#_4-6-align-self属性\",\"21\":\"3\",\"22\":\"3#一、概述\",\"23\":\"3#二、基本概念\",\"24\":\"3#_2-1-容器和项目\",\"25\":\"3#_2-2-行和列\",\"26\":\"3#_2-3-单元格\",\"27\":\"3#_2-4-网格线\",\"28\":\"3#三、容器属性\",\"29\":\"3#_3-1-display-属性\",\"30\":\"3#_3-2-grid-template-columns-属性-grid-template-rows-属性\",\"31\":\"3#_3-3-grid-row-gap-属性-grid-column-gap-属性-grid-gap-属性\",\"32\":\"3#_3-4-grid-template-areas-属性\",\"33\":\"3#_3-5-grid-auto-flow-属性\",\"34\":\"3#_3-6-justify-items-属性-align-items-属性-place-items-属性\",\"35\":\"3#_3-7-justify-content-属性-align-content-属性-place-content-属性\",\"36\":\"3#_3-8-grid-auto-columns-属性-grid-auto-rows-属性\",\"37\":\"3#_3-9-grid-template-属性-grid-属性\",\"38\":\"3#四、项目属性\",\"39\":\"3#_4-1-grid-column-start-属性-grid-column-end-属性-grid-row-start-属性-grid-row-end-属性\",\"40\":\"3#_4-2-grid-column-属性-grid-row-属性\",\"41\":\"3#_4-3-grid-area-属性\",\"42\":\"3#_4-4-justify-self-属性-align-self-属性-place-self-属性\",\"43\":\"4\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[1,5],\"3\":[1,7],\"4\":[2,24],\"5\":[4,28],\"6\":[2,30],\"7\":[2,9],\"8\":[4,18],\"9\":[4,24],\"10\":[3,13],\"11\":[4,25],\"12\":[4,22],\"13\":[4,27],\"14\":[2,8],\"15\":[3,8],\"16\":[4,19],\"17\":[4,21],\"18\":[3,19],\"19\":[3,23],\"20\":[4,23],\"21\":[2,2],\"22\":[2,38],\"23\":[2,5],\"24\":[3,24],\"25\":[2,10],\"26\":[3,11],\"27\":[3,20],\"28\":[2,8],\"29\":[4,24],\"30\":[7,136],\"31\":[6,33],\"32\":[6,56],\"33\":[6,55],\"34\":[7,36],\"35\":[7,45],\"36\":[7,36],\"37\":[5,15],\"38\":[2,2],\"39\":[8,65],\"40\":[6,39],\"41\":[5,23],\"42\":[6,39],\"43\":[1,3]},\"averageFieldLength\":[3.6818181818181817,24.5],\"storedFields\":{\"0\":{\"h\":\"页面的标题\"},\"1\":{\"h\":\"指令\"},\"2\":{\"h\":\"项目启动\",\"t\":[\"npm run docs:dev \"]},\"3\":{\"h\":\"项目更新\",\"t\":[\"进入项目根目录，右键打开Git Bash，输入：\",\"./deploy.sh \"]},\"4\":{\"h\":\"Flex 布局\",\"t\":[\"作者： 阮一峰\",\"网页布局（layout）是 CSS 的一个重点应用。\",\"布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\",\"Flex 布局将成为未来布局的首选方案。本文介绍它的语法，下一篇文章给出常见布局的 Flex 写法。\"]},\"5\":{\"h\":\"一、Flex 布局是什么？\",\"t\":[\"Flex 是 Flexible Box 的缩写，意为\\\"弹性布局\\\"，用来为盒状模型提供最大的灵活性。\",\"任何一个容器都可以指定为 Flex 布局。\",\".box{ display: flex; } \",\"行内元素也可以使用 Flex 布局。\",\".box{ display: inline-flex; } \",\"Webkit 内核的浏览器，必须加上-webkit前缀。\",\".box{ display: -webkit-flex; /* Safari */ display: flex; } \",\"注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。\"]},\"6\":{\"h\":\"二、基本概念\",\"t\":[\"采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\\\"容器\\\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\\\"项目\\\"。\",\"容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\",\"项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\"]},\"7\":{\"h\":\"三、容器的属性\",\"t\":[\"以下6个属性设置在容器上。\",\"flex-direction\",\"flex-wrap\",\"flex-flow\",\"justify-content\",\"align-items\",\"align-content\"]},\"8\":{\"h\":\"3.1 flex-direction属性\",\"t\":[\"flex-direction属性决定主轴的方向（即项目的排列方向）。\",\".box { flex-direction: row | row-reverse | column | column-reverse; } \",\"它可能有4个值。\",\"row（默认值）：主轴为水平方向，起点在左端。\",\"row-reverse：主轴为水平方向，起点在右端。\",\"column：主轴为垂直方向，起点在上沿。\",\"column-reverse：主轴为垂直方向，起点在下沿。\"]},\"9\":{\"h\":\"3.2 flex-wrap属性\",\"t\":[\"默认情况下，项目都排在一条线（又称\\\"轴线\\\"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。\",\".box{ flex-wrap: nowrap | wrap | wrap-reverse; } \",\"它可能取三个值。\",\"（1）nowrap（默认）：不换行。\",\"（2）wrap：换行，第一行在上方。\",\"（3）wrap-reverse：换行，第一行在下方。\"]},\"10\":{\"h\":\"3.3 flex-flow\",\"t\":[\"flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\",\".box { flex-flow: <flex-direction> || <flex-wrap>; } \"]},\"11\":{\"h\":\"3.4 justify-content属性\",\"t\":[\"justify-content属性定义了项目在主轴上的对齐方式。\",\".box { justify-content: flex-start | flex-end | center | space-between | space-around; } \",\"它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\",\"flex-start（默认值）：左对齐\",\"flex-end：右对齐\",\"center： 居中\",\"space-between：两端对齐，项目之间的间隔都相等。\",\"space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\"]},\"12\":{\"h\":\"3.5 align-items属性\",\"t\":[\"align-items属性定义项目在交叉轴上如何对齐。\",\".box { align-items: flex-start | flex-end | center | baseline | stretch; } \",\"它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\",\"flex-start：交叉轴的起点对齐。\",\"flex-end：交叉轴的终点对齐。\",\"center：交叉轴的中点对齐。\",\"baseline: 项目的第一行文字的基线对齐。\",\"stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\"]},\"13\":{\"h\":\"3.6 align-content属性\",\"t\":[\"align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\",\".box { align-content: flex-start | flex-end | center | space-between | space-around | stretch; } \",\"该属性可能取6个值。\",\"flex-start：与交叉轴的起点对齐。\",\"flex-end：与交叉轴的终点对齐。\",\"center：与交叉轴的中点对齐。\",\"space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\",\"space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\",\"stretch（默认值）：轴线占满整个交叉轴。\"]},\"14\":{\"h\":\"四、项目的属性\",\"t\":[\"以下6个属性设置在项目上。\",\"order\",\"flex-grow\",\"flex-shrink\",\"flex-basis\",\"flex\",\"align-self\"]},\"15\":{\"h\":\"4.1 order属性\",\"t\":[\"order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\",\".item { order: <integer>; } \"]},\"16\":{\"h\":\"4.2 flex-grow属性\",\"t\":[\"flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\",\".item { flex-grow: <number>; /* default 0 */ } \",\"如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\"]},\"17\":{\"h\":\"4.3 flex-shrink属性\",\"t\":[\"flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\",\".item { flex-shrink: <number>; /* default 1 */ } \",\"如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。\",\"负值对该属性无效。\"]},\"18\":{\"h\":\"4.4 flex-basis属性\",\"t\":[\"flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。\",\".item { flex-basis: <length> | auto; /* default auto */ } \",\"它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。\"]},\"19\":{\"h\":\"4.5 flex属性\",\"t\":[\"flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。\",\".item { flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] } \",\"该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\",\"建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\"]},\"20\":{\"h\":\"4.6 align-self属性\",\"t\":[\"align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\",\".item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } \",\"该属性可能取6个值，除了auto，其他都与align-items属性完全一致。\"]},\"21\":{\"h\":\"Grid 布局\",\"t\":[\"作者： 阮一峰\"]},\"22\":{\"h\":\"一、概述\",\"t\":[\"网格布局（Grid）是最强大的 CSS 布局方案。\",\"它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。\",\"上图这样的布局，就是 Grid 布局的拿手好戏。\",\"Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。\",\"Flex 布局是轴线布局，只能指定\\\"项目\\\"针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成\\\"行\\\"和\\\"列\\\"，产生单元格，然后指定\\\"项目所在\\\"的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。\"]},\"23\":{\"h\":\"二、基本概念\",\"t\":[\"学习 Grid 布局之前，需要了解一些基本概念。\"]},\"24\":{\"h\":\"2.1 容器和项目\",\"t\":[\"采用网格布局的区域，称为\\\"容器\\\"（container）。容器内部采用网格定位的子元素，称为\\\"项目\\\"（item）。\",\"<div> <div><p>1</p></div> <div><p>2</p></div> <div><p>3</p></div> </div> \",\"上面代码中，最外层的<div>元素就是容器，内层的三个<div>元素就是项目。\",\"注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<p>元素就不是项目。Grid 布局只对项目生效。\"]},\"25\":{\"h\":\"2.2 行和列\",\"t\":[\"容器里面的水平区域称为\\\"行\\\"（row），垂直区域称为\\\"列\\\"（column）。\",\"上图中，水平的深色区域就是\\\"行\\\"，垂直的深色区域就是\\\"列\\\"。\"]},\"26\":{\"h\":\"2.3 单元格\",\"t\":[\"行和列的交叉区域，称为\\\"单元格\\\"（cell）。\",\"正常情况下，n行和m列会产生n x m个单元格。比如，3行3列会产生9个单元格。\"]},\"27\":{\"h\":\"2.4 网格线\",\"t\":[\"划分网格的线，称为\\\"网格线\\\"（grid line）。水平网格线划分出行，垂直网格线划分出列。\",\"正常情况下，n行有n + 1根水平网格线，m列有m + 1根垂直网格线，比如三行就有四根水平网格线。\",\"上图是一个 4 x 4 的网格，共有5根水平网格线和5根垂直网格线。\"]},\"28\":{\"h\":\"三、容器属性\",\"t\":[\"Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。\"]},\"29\":{\"h\":\"3.1 display 属性\",\"t\":[\"display: grid指定一个容器采用网格布局。\",\"div { display: grid; } \",\"上图是display: grid的效果。\",\"默认情况下，容器元素都是块级元素，但也可以设成行内元素。\",\"div { display: inline-grid; } \",\"上面代码指定div是一个行内元素，该元素内部采用网格布局。\",\"上图是display: inline-grid的效果。\",\"注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。\"]},\"30\":{\"h\":\"3.2 grid-template-columns 属性， grid-template-rows 属性\",\"t\":[\"容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。\",\".container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; } \",\"上面代码指定了一个三行三列的网格，列宽和行高都是100px。\",\"除了使用绝对单位，也可以使用百分比。\",\".container { display: grid; grid-template-columns: 33.33% 33.33% 33.33%; grid-template-rows: 33.33% 33.33% 33.33%; } \",\"（1）repeat()\",\"有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。上面的代码用repeat()改写如下。\",\".container { display: grid; grid-template-columns: repeat(3, 33.33%); grid-template-rows: repeat(3, 33.33%); } \",\"repeat()接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。\",\"repeat()重复某种模式也是可以的。\",\"grid-template-columns: repeat(2, 100px 20px 80px); \",\"上面代码定义了6列，第一列和第四列的宽度为100px，第二列和第五列为20px，第三列和第六列为80px。\",\"（2）auto-fill 关键字\",\"有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。\",\".container { display: grid; grid-template-columns: repeat(auto-fill, 100px); } \",\"上面代码表示每列宽度100px，然后自动填充，直到容器不能放置更多的列。\",\"除了auto-fill，还有一个关键字auto-fit，两者的行为基本是相同的。只有当容器足够宽，可以在一行容纳所有单元格，并且单元格宽度不固定的时候，才会有行为差异：auto-fill会用空格子填满剩余宽度，auto-fit则会尽量扩大单元格的宽度。\",\"（3）fr 关键字\",\"为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为\\\"片段\\\"）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。\",\".container { display: grid; grid-template-columns: 1fr 1fr; } \",\"上面代码表示两个相同宽度的列。\",\"fr可以与绝对长度的单位结合使用，这时会非常方便。\",\".container { display: grid; grid-template-columns: 150px 1fr 2fr; } \",\"上面代码表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。\",\"（4）minmax()\",\"minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。\",\"grid-template-columns: 1fr 1fr minmax(100px, 1fr); \",\"上面代码中，minmax(100px, 1fr)表示列宽不小于100px，不大于1fr。\",\"（5）auto 关键字\",\"auto关键字表示由浏览器自己决定长度。\",\"grid-template-columns: 100px auto 100px; \",\"上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度。\",\"（6）网格线的名称\",\"grid-template-columns属性和grid-template-rows属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。\",\".container { display: grid; grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4]; grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4]; } \",\"上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。\",\"网格布局允许同一根线有多个名字，比如[fifth-line row-5]。\",\"（7）布局实例\",\"grid-template-columns属性对于网页布局非常有用。两栏式布局只需要一行代码。\",\".wrapper { display: grid; grid-template-columns: 70% 30%; } \",\"上面代码将左边栏设为70%，右边栏设为30%。\",\"传统的十二网格布局，写起来也很容易。\",\"grid-template-columns: repeat(12, 1fr); \"]},\"31\":{\"h\":\"3.3 grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性\",\"t\":[\"grid-row-gap属性设置行与行的间隔（行间距），grid-column-gap属性设置列与列的间隔（列间距）。\",\".container { grid-row-gap: 20px; grid-column-gap: 20px; } \",\"上面代码中，grid-row-gap用于设置行间距，grid-column-gap用于设置列间距。\",\"grid-gap属性是grid-column-gap和grid-row-gap的合并简写形式，语法如下。\",\"grid-gap: <grid-row-gap> <grid-column-gap>; \",\"因此，上面一段 CSS 代码等同于下面的代码。\",\".container { grid-gap: 20px 20px; } \",\"如果grid-gap省略了第二个值，浏览器认为第二个值等于第一个值。\",\"根据最新标准，上面三个属性名的grid-前缀已经删除，grid-column-gap和grid-row-gap写成column-gap和row-gap，grid-gap写成gap。\"]},\"32\":{\"h\":\"3.4 grid-template-areas 属性\",\"t\":[\"网格布局允许指定\\\"区域\\\"（area），一个区域由单个或多个单元格组成。grid-template-areas属性用于定义区域。\",\".container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; grid-template-areas: 'a b c' 'd e f' 'g h i'; } \",\"上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。\",\"多个单元格合并成一个区域的写法如下。\",\"grid-template-areas: 'a a a' 'b b b' 'c c c'; \",\"上面代码将9个单元格分成a、b、c三个区域。\",\"下面是一个布局实例。\",\"grid-template-areas: \\\"header header header\\\" \\\"main main sidebar\\\" \\\"footer footer footer\\\"; \",\"上面代码中，顶部是页眉区域header，底部是页脚区域footer，中间部分则为main和sidebar。\",\"如果某些区域不需要利用，则使用\\\"点\\\"（.）表示。\",\"grid-template-areas: 'a . c' 'd . f' 'g . i'; \",\"上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。\",\"注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。\",\"比如，区域名为header，则起始位置的水平网格线和垂直网格线叫做header-start，终止位置的水平网格线和垂直网格线叫做header-end。\"]},\"33\":{\"h\":\"3.5 grid-auto-flow 属性\",\"t\":[\"划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是\\\"先行后列\\\"，即先填满第一行，再开始放入第二行，即下图数字的顺序。\",\"这个顺序由grid-auto-flow属性决定，默认值是row，即\\\"先行后列\\\"。也可以将它设成column，变成\\\"先列后行\\\"。\",\"grid-auto-flow: column; \",\"上面代码设置了column以后，放置顺序就变成了下图。\",\"grid-auto-flow属性除了设置成row和column，还可以设成row dense和column dense。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。\",\"下面的例子让1号项目和2号项目各占据两个单元格，然后在默认的grid-auto-flow: row情况下，会产生下面这样的布局。\",\"上图中，1号项目后面的位置是空的，这是因为3号项目默认跟着2号项目，所以会排在2号项目后面。\",\"现在修改设置，设为row dense，表示\\\"先行后列\\\"，并且尽可能紧密填满，尽量不出现空格。\",\"grid-auto-flow: row dense; \",\"上面代码的效果如下。\",\"上图会先填满第一行，再填满第二行，所以3号项目就会紧跟在1号项目的后面。8号项目和9号项目就会排到第四行。\",\"如果将设置改为column dense，表示\\\"先列后行\\\"，并且尽量填满空格。\",\"grid-auto-flow: column dense; \",\"上面代码的效果如下。\",\"上图会先填满第一列，再填满第2列，所以3号项目在第一列，4号项目在第二列。8号项目和9号项目被挤到了第四列。\"]},\"34\":{\"h\":\"3.6 justify-items 属性， align-items 属性， place-items 属性\",\"t\":[\"justify-items属性设置单元格内容的水平位置（左中右），align-items属性设置单元格内容的垂直位置（上中下）。\",\".container { justify-items: start | end | center | stretch; align-items: start | end | center | stretch; } \",\"这两个属性的写法完全相同，都可以取下面这些值。\",\"start：对齐单元格的起始边缘。\",\"end：对齐单元格的结束边缘。\",\"center：单元格内部居中。\",\"stretch：拉伸，占满单元格的整个宽度（默认值）。\",\".container { justify-items: start; } \",\"上面代码表示，单元格的内容左对齐，效果如下图。\",\".container { align-items: start; } \",\"上面代码表示，单元格的内容头部对齐，效果如下图。\",\"place-items属性是align-items属性和justify-items属性的合并简写形式。\",\"place-items: <align-items> <justify-items>; \",\"下面是一个例子。\",\"place-items: start end; \",\"如果省略第二个值，则浏览器认为与第一个值相等。\"]},\"35\":{\"h\":\"3.7 justify-content 属性， align-content 属性， place-content 属性\",\"t\":[\"justify-content属性是整个内容区域在容器里面的水平位置（左中右），align-content属性是整个内容区域的垂直位置（上中下）。\",\".container { justify-content: start | end | center | stretch | space-around | space-between | space-evenly; align-content: start | end | center | stretch | space-around | space-between | space-evenly; } \",\"这两个属性的写法完全相同，都可以取下面这些值。（下面的图都以justify-content属性为例，align-content属性的图完全一样，只是将水平方向改成垂直方向。）\",\"start - 对齐容器的起始边框。\",\"end - 对齐容器的结束边框。\",\"center - 容器内部居中。\",\"stretch - 项目大小没有指定时，拉伸占据整个网格容器。\",\"space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。\",\"space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。\",\"space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。\",\"place-content属性是align-content属性和justify-content属性的合并简写形式。\",\"place-content: <align-content> <justify-content> \",\"下面是一个例子。\",\"place-content: space-around space-evenly; \",\"如果省略第二个值，浏览器就会假定第二个值等于第一个值。\"]},\"36\":{\"h\":\"3.8 grid-auto-columns 属性， grid-auto-rows 属性\",\"t\":[\"有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。\",\"grid-auto-columns属性和grid-auto-rows属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与grid-template-columns和grid-template-rows完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。\",\"下面的例子里面，划分好的网格是3行 x 3列，但是，8号项目指定在第4行，9号项目指定在第5行。\",\".container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; grid-auto-rows: 50px; } \",\"上面代码指定新增的行高统一为50px（原始的行高为100px）。\"]},\"37\":{\"h\":\"3.9 grid-template 属性， grid 属性\",\"t\":[\"grid-template属性是grid-template-columns、grid-template-rows和grid-template-areas这三个属性的合并简写形式。\",\"grid属性是grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow这六个属性的合并简写形式。\",\"从易读易写的角度考虑，还是建议不要合并属性，所以这里就不详细介绍这两个属性了。\"]},\"38\":{\"h\":\"四、项目属性\",\"t\":[\"下面这些属性定义在项目上面。\"]},\"39\":{\"h\":\"4.1 grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性\",\"t\":[\"项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。\",\"grid-column-start属性：左边框所在的垂直网格线\",\"grid-column-end属性：右边框所在的垂直网格线\",\"grid-row-start属性：上边框所在的水平网格线\",\"grid-row-end属性：下边框所在的水平网格线\",\".item-1 { grid-column-start: 2; grid-column-end: 4; } \",\"上面代码指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。\",\"上图中，只指定了1号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。\",\"除了1号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的grid-auto-flow属性决定，这个属性的默认值是row，因此会\\\"先行后列\\\"进行排列。读者可以把这个属性的值分别改成column、row dense和column dense，看看其他项目的位置发生了怎样的变化。\",\"下面的例子是指定四个边框位置的效果。\",\".item-1 { grid-column-start: 1; grid-column-end: 3; grid-row-start: 2; grid-row-end: 4; } \",\"这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。\",\".item-1 { grid-column-start: header-start; grid-column-end: header-end; } \",\"上面代码中，左边框和右边框的位置，都指定为网格线的名字。\",\"这四个属性的值还可以使用span关键字，表示\\\"跨越\\\"，即左右边框（上下边框）之间跨越多少个网格。\",\".item-1 { grid-column-start: span 2; } \",\"上面代码表示，1号项目的左边框距离右边框跨越2个网格。\",\"这与下面的代码效果完全一样。\",\".item-1 { grid-column-end: span 2; } \",\"使用这四个属性，如果产生了项目的重叠，则使用z-index属性指定项目的重叠顺序。\"]},\"40\":{\"h\":\"4.2 grid-column 属性， grid-row 属性\",\"t\":[\"grid-column属性是grid-column-start和grid-column-end的合并简写形式，grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。\",\".item { grid-column: <start-line> / <end-line>; grid-row: <start-line> / <end-line>; } \",\"下面是一个例子。\",\".item-1 { grid-column: 1 / 3; grid-row: 1 / 2; } /* 等同于 */ .item-1 { grid-column-start: 1; grid-column-end: 3; grid-row-start: 1; grid-row-end: 2; } \",\"上面代码中，项目item-1占据第一行，从第一根列线到第三根列线。\",\"这两个属性之中，也可以使用span关键字，表示跨越多少个网格。\",\".item-1 { background: #b03532; grid-column: 1 / 3; grid-row: 1 / 3; } /* 等同于 */ .item-1 { background: #b03532; grid-column: 1 / span 2; grid-row: 1 / span 2; } \",\"上面代码中，项目item-1占据的区域，包括第一行 + 第二行、第一列 + 第二列。\",\"斜杠以及后面的部分可以省略，默认跨越一个网格。\",\".item-1 { grid-column: 1; grid-row: 1; } \",\"上面代码中，项目item-1占据左上角第一个网格。\"]},\"41\":{\"h\":\"4.3 grid-area 属性\",\"t\":[\"grid-area属性指定项目放在哪一个区域。\",\".item-1 { grid-area: e; } \",\"上面代码中，1号项目位于e区域，效果如下图。\",\"grid-area属性还可用作grid-row-start、grid-column-start、grid-row-end、grid-column-end的合并简写形式，直接指定项目的位置。\",\".item { grid-area: <row-start> / <column-start> / <row-end> / <column-end>; } \",\"下面是一个例子。\",\".item-1 { grid-area: 1 / 1 / 3 / 3; } \"]},\"42\":{\"h\":\"4.4 justify-self 属性， align-self 属性， place-self 属性\",\"t\":[\"justify-self属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目。\",\"align-self属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目。\",\".item { justify-self: start | end | center | stretch; align-self: start | end | center | stretch; } \",\"这两个属性都可以取下面四个值。\",\"start：对齐单元格的起始边缘。\",\"end：对齐单元格的结束边缘。\",\"center：单元格内部居中。\",\"stretch：拉伸，占满单元格的整个宽度（默认值）。\",\"下面是justify-self: start的例子。\",\".item-1 { justify-self: start; } \",\"place-self属性是align-self属性和justify-self属性的合并简写形式。\",\"place-self: <align-self> <justify-self>; \",\"下面是一个例子。\",\"place-self: center center; \",\"如果省略第二个值，place-self属性会认为这两个值相等。\"]},\"43\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"跟align\",{\"1\":{\"42\":1}}],[\"跟justify\",{\"1\":{\"42\":1}}],[\"直接指定项目的位置\",{\"1\":{\"41\":1}}],[\"直到容器不能放置更多的列\",{\"1\":{\"30\":1}}],[\"斜杠以及后面的部分可以省略\",{\"1\":{\"40\":1}}],[\"包括第一行\",{\"1\":{\"40\":1}}],[\"从第一根列线到第三根列线\",{\"1\":{\"40\":1}}],[\"从易读易写的角度考虑\",{\"1\":{\"37\":1}}],[\"等同于\",{\"1\":{\"40\":2}}],[\"等设置都将失效\",{\"1\":{\"29\":1}}],[\"使用这四个属性\",{\"1\":{\"39\":1}}],[\"之间跨越多少个网格\",{\"1\":{\"39\":1}}],[\"跨越\",{\"1\":{\"39\":1}}],[\"看看其他项目的位置发生了怎样的变化\",{\"1\":{\"39\":1}}],[\"读者可以把这个属性的值分别改成column\",{\"1\":{\"39\":1}}],[\"进行排列\",{\"1\":{\"39\":1}}],[\"进入项目根目录\",{\"1\":{\"3\":1}}],[\"由浏览器自动布局\",{\"1\":{\"39\":1}}],[\"没有指定上下边框\",{\"1\":{\"39\":1}}],[\"9\",{\"0\":{\"37\":1}}],[\"9号项目指定在第5行\",{\"1\":{\"36\":1}}],[\"原始的行高为100px\",{\"1\":{\"36\":1}}],[\"划分好的网格是3行\",{\"1\":{\"36\":1}}],[\"划分网格以后\",{\"1\":{\"33\":1}}],[\"划分网格的线\",{\"1\":{\"27\":1}}],[\"决定新增网格的列宽和行高\",{\"1\":{\"36\":1}}],[\"在现有网格的外部\",{\"1\":{\"36\":1}}],[\"对齐容器的结束边框\",{\"1\":{\"35\":1}}],[\"对齐容器的起始边框\",{\"1\":{\"35\":1}}],[\"对齐单元格的结束边缘\",{\"1\":{\"34\":1,\"42\":1}}],[\"对齐单元格的起始边缘\",{\"1\":{\"34\":1,\"42\":1}}],[\"效果如下图\",{\"1\":{\"34\":2,\"41\":1}}],[\"占满单元格的整个宽度\",{\"1\":{\"34\":1,\"42\":1}}],[\"占据的交叉轴空间叫做cross\",{\"1\":{\"6\":1}}],[\"拉伸占据整个网格容器\",{\"1\":{\"35\":1}}],[\"拉伸\",{\"1\":{\"34\":1,\"42\":1}}],[\"左边框和右边框的位置\",{\"1\":{\"39\":1}}],[\"左边框所在的垂直网格线\",{\"1\":{\"39\":1}}],[\"左中右\",{\"1\":{\"34\":1,\"35\":1,\"42\":1}}],[\"左对齐\",{\"1\":{\"11\":1}}],[\"8号项目指定在第4行\",{\"1\":{\"36\":1}}],[\"8号项目和9号项目被挤到了第四列\",{\"1\":{\"33\":1}}],[\"8号项目和9号项目就会排到第四行\",{\"1\":{\"33\":1}}],[\"8\",{\"0\":{\"36\":1}}],[\"80px\",{\"1\":{\"30\":1}}],[\"再填满第2列\",{\"1\":{\"33\":1}}],[\"再填满第二行\",{\"1\":{\"33\":1}}],[\"再开始放入第二行\",{\"1\":{\"33\":1}}],[\"尽量不出现空格\",{\"1\":{\"33\":1}}],[\"并且尽量填满空格\",{\"1\":{\"33\":1}}],[\"并且尽可能紧密填满\",{\"1\":{\"33\":1}}],[\"并且单元格宽度不固定的时候\",{\"1\":{\"30\":1}}],[\"现在修改设置\",{\"1\":{\"33\":1}}],[\"现在浏览器内置了\",{\"1\":{\"22\":1}}],[\"会产生下面这样的布局\",{\"1\":{\"33\":1}}],[\"会自动命名为区域名\",{\"1\":{\"32\":1}}],[\"剩下的项目怎么自动放置\",{\"1\":{\"33\":1}}],[\"某些项目指定位置以后\",{\"1\":{\"33\":1}}],[\"放置顺序就变成了下图\",{\"1\":{\"33\":1}}],[\"先列后行\",{\"1\":{\"33\":2}}],[\"先行后列\",{\"1\":{\"33\":3,\"39\":1}}],[\"变成\",{\"1\":{\"33\":1}}],[\"自动放置在每一个网格\",{\"1\":{\"33\":1}}],[\"终止位置的水平网格线和垂直网格线叫做header\",{\"1\":{\"32\":1}}],[\"终止网格线自动命名为区域名\",{\"1\":{\"32\":1}}],[\"或者该单元格不属于任何区域\",{\"1\":{\"32\":1}}],[\"或每一列\",{\"1\":{\"30\":1}}],[\"中间一列为点\",{\"1\":{\"32\":1}}],[\"中间部分则为main和sidebar\",{\"1\":{\"32\":1}}],[\"点\",{\"1\":{\"32\":1}}],[\"底部是页脚区域footer\",{\"1\":{\"32\":1}}],[\"顶部是页眉区域header\",{\"1\":{\"32\":1}}],[\"多个单元格合并成一个区域的写法如下\",{\"1\":{\"32\":1}}],[\"分别定位在哪根网格线\",{\"1\":{\"39\":1}}],[\"分别对应这九个单元格\",{\"1\":{\"32\":1}}],[\"分别为最小值和最大值\",{\"1\":{\"30\":1}}],[\"header\",{\"1\":{\"32\":3,\"39\":2}}],[\"h\",{\"1\":{\"32\":1}}],[\"evenly\",{\"1\":{\"35\":4}}],[\"e\",{\"1\":{\"32\":1,\"41\":1}}],[\"end>\",{\"1\":{\"41\":2}}],[\"end的合并简写形式\",{\"1\":{\"40\":2,\"41\":1}}],[\"end属性\",{\"1\":{\"39\":2}}],[\"end\",{\"0\":{\"39\":2},\"1\":{\"6\":2,\"11\":2,\"12\":2,\"13\":2,\"20\":1,\"32\":2,\"34\":4,\"35\":3,\"39\":6,\"40\":2,\"41\":1,\"42\":3}}],[\"区域名为header\",{\"1\":{\"32\":1}}],[\"区域的命名会影响到网格线\",{\"1\":{\"32\":1}}],[\"区域\",{\"1\":{\"32\":1}}],[\"前缀已经删除\",{\"1\":{\"31\":1}}],[\"前者不缩小\",{\"1\":{\"17\":1}}],[\"根据最新标准\",{\"1\":{\"31\":1}}],[\"浏览器完全根据单元格内容的大小\",{\"1\":{\"36\":1}}],[\"浏览器自动创建的多余网格的列宽和行高\",{\"1\":{\"36\":1}}],[\"浏览器会自动生成多余的网格\",{\"1\":{\"36\":1}}],[\"浏览器就会假定第二个值等于第一个值\",{\"1\":{\"35\":1}}],[\"浏览器认为第二个值等于第一个值\",{\"1\":{\"31\":1}}],[\"浏览器根据这个属性\",{\"1\":{\"18\":1}}],[\"代码等同于下面的代码\",{\"1\":{\"31\":1}}],[\"语法如下\",{\"1\":{\"31\":1}}],[\"g\",{\"1\":{\"32\":2}}],[\"gap写成gap\",{\"1\":{\"31\":1}}],[\"gap写成column\",{\"1\":{\"31\":1}}],[\"gap和row\",{\"1\":{\"31\":1}}],[\"gap和grid\",{\"1\":{\"31\":2}}],[\"gap省略了第二个值\",{\"1\":{\"31\":1}}],[\"gap>\",{\"1\":{\"31\":2}}],[\"gap的合并简写形式\",{\"1\":{\"31\":1}}],[\"gap属性是grid\",{\"1\":{\"31\":1}}],[\"gap属性设置列与列的间隔\",{\"1\":{\"31\":1}}],[\"gap属性设置行与行的间隔\",{\"1\":{\"31\":1}}],[\"gap用于设置列间距\",{\"1\":{\"31\":1}}],[\"gap用于设置行间距\",{\"1\":{\"31\":1}}],[\"gap\",{\"0\":{\"31\":3},\"1\":{\"31\":5}}],[\"grid属性是grid\",{\"1\":{\"37\":1}}],[\"grid的效果\",{\"1\":{\"29\":2}}],[\"grid指定一个容器采用网格布局\",{\"1\":{\"29\":1}}],[\"grid\",{\"0\":{\"21\":1,\"30\":2,\"31\":3,\"32\":1,\"33\":1,\"36\":2,\"37\":2,\"39\":4,\"40\":2,\"41\":1},\"1\":{\"22\":5,\"23\":1,\"24\":1,\"27\":1,\"28\":1,\"29\":2,\"30\":28,\"31\":11,\"32\":8,\"33\":4,\"36\":5,\"37\":7,\"39\":14,\"40\":16,\"41\":8}}],[\"grow属性为2\",{\"1\":{\"16\":1}}],[\"grow属性都为1\",{\"1\":{\"16\":1}}],[\"grow属性定义项目的放大比例\",{\"1\":{\"16\":1}}],[\"grow属性\",{\"0\":{\"16\":1}}],[\"grow\",{\"1\":{\"14\":1,\"16\":1,\"19\":2}}],[\"写起来也很容易\",{\"1\":{\"30\":1}}],[\"写法\",{\"1\":{\"4\":1}}],[\"传统的十二网格布局\",{\"1\":{\"30\":1}}],[\"70\",{\"1\":{\"30\":1}}],[\"7\",{\"0\":{\"35\":1},\"1\":{\"30\":1}}],[\"方括号里面依次是这八根线的名字\",{\"1\":{\"30\":1}}],[\"方便以后的引用\",{\"1\":{\"30\":1}}],[\"因此会\",{\"1\":{\"39\":1}}],[\"因此\",{\"1\":{\"31\":1}}],[\"因此有4根垂直网格线和4根水平网格线\",{\"1\":{\"30\":1}}],[\"因为浏览器会推算相关值\",{\"1\":{\"19\":1}}],[\"指定每一根网格线的名字\",{\"1\":{\"30\":1}}],[\"指令\",{\"0\":{\"1\":1}}],[\"还是建议不要合并属性\",{\"1\":{\"37\":1}}],[\"还可以指定为网格线的名字\",{\"1\":{\"39\":1}}],[\"还可以设成row\",{\"1\":{\"33\":1}}],[\"还可以使用方括号\",{\"1\":{\"30\":1}}],[\"还有一个关键字auto\",{\"1\":{\"30\":1}}],[\"且这个值大于最大宽度\",{\"1\":{\"30\":1}}],[\"除非单元格内容设置了min\",{\"1\":{\"30\":1}}],[\"除了指定为第几个网格线\",{\"1\":{\"39\":1}}],[\"除了1号项目以外\",{\"1\":{\"39\":1}}],[\"除了使用绝对单位\",{\"1\":{\"30\":1}}],[\"除了auto\",{\"1\":{\"20\":1,\"30\":1}}],[\"表示跨越多少个网格\",{\"1\":{\"40\":1}}],[\"表示没有用到该单元格\",{\"1\":{\"32\":1}}],[\"表示\",{\"1\":{\"32\":1,\"33\":2,\"39\":1}}],[\"表示列宽不小于100px\",{\"1\":{\"30\":1}}],[\"表示长度就在这个范围之中\",{\"1\":{\"30\":1}}],[\"表示继承父元素的align\",{\"1\":{\"20\":1}}],[\"就表示后者是前者的两倍\",{\"1\":{\"30\":1}}],[\"就是\",{\"1\":{\"22\":1}}],[\"片段\",{\"1\":{\"30\":1}}],[\"为了方便表示比例关系\",{\"1\":{\"30\":1}}],[\"才会有行为差异\",{\"1\":{\"30\":1}}],[\"只指定了1号项目的左右边框\",{\"1\":{\"39\":1}}],[\"只是将水平方向改成垂直方向\",{\"1\":{\"35\":1}}],[\"只有当容器足够宽\",{\"1\":{\"30\":1}}],[\"只能指定\",{\"1\":{\"22\":1}}],[\"只能通过复杂的\",{\"1\":{\"22\":1}}],[\"两栏式布局只需要一行代码\",{\"1\":{\"30\":1}}],[\"两者的行为基本是相同的\",{\"1\":{\"30\":1}}],[\"两端对齐\",{\"1\":{\"11\":1}}],[\"然后在默认的grid\",{\"1\":{\"33\":1}}],[\"然后将其定名为a到i的九个区域\",{\"1\":{\"32\":1}}],[\"然后自动填充\",{\"1\":{\"30\":1}}],[\"然后指定\",{\"1\":{\"22\":1}}],[\"容纳尽可能多的单元格\",{\"1\":{\"30\":1}}],[\"容器内部居中\",{\"1\":{\"35\":1}}],[\"容器内部采用网格定位的子元素\",{\"1\":{\"24\":1}}],[\"容器的子元素会按照顺序\",{\"1\":{\"33\":1}}],[\"容器的属性\",{\"0\":{\"7\":1}}],[\"容器指定了网格布局以后\",{\"1\":{\"30\":1}}],[\"容器子元素\",{\"1\":{\"29\":1}}],[\"容器元素都是块级元素\",{\"1\":{\"29\":1}}],[\"容器属性\",{\"0\":{\"28\":1}}],[\"容器里面的水平区域称为\",{\"1\":{\"25\":1}}],[\"容器和项目\",{\"0\":{\"24\":1}}],[\"容器默认存在两根轴\",{\"1\":{\"6\":1}}],[\"容器\",{\"1\":{\"6\":2,\"24\":1}}],[\"有时\",{\"1\":{\"30\":1}}],[\"有时候\",{\"1\":{\"30\":1,\"36\":1}}],[\"关键字\",{\"1\":{\"30\":3}}],[\"found\",{\"1\":{\"43\":1}}],[\"footer\",{\"1\":{\"32\":3}}],[\"f\",{\"1\":{\"32\":2}}],[\"fr可以与绝对长度的单位结合使用\",{\"1\":{\"30\":1}}],[\"fraction\",{\"1\":{\"30\":1}}],[\"fr\",{\"1\":{\"30\":1}}],[\"fifth\",{\"1\":{\"30\":1}}],[\"fit则会尽量扩大单元格的宽度\",{\"1\":{\"30\":1}}],[\"fit\",{\"1\":{\"30\":1}}],[\"fill会用空格子填满剩余宽度\",{\"1\":{\"30\":1}}],[\"fill关键字表示自动填充\",{\"1\":{\"30\":1}}],[\"fill\",{\"1\":{\"30\":3}}],[\"flow这六个属性的合并简写形式\",{\"1\":{\"37\":1}}],[\"flow属性除了设置成row和column\",{\"1\":{\"33\":1}}],[\"flow属性决定\",{\"1\":{\"33\":1,\"39\":1}}],[\"flow属性是flex\",{\"1\":{\"10\":1}}],[\"flow\",{\"0\":{\"10\":1,\"33\":1},\"1\":{\"7\":1,\"10\":1,\"33\":4}}],[\"float属性\",{\"1\":{\"4\":1}}],[\"flex属性是flex\",{\"1\":{\"19\":1}}],[\"flex属性\",{\"0\":{\"19\":1}}],[\"flexible\",{\"1\":{\"5\":1}}],[\"flex\",{\"0\":{\"4\":1,\"5\":1,\"8\":1,\"9\":1,\"10\":1,\"16\":1,\"17\":1,\"18\":1},\"1\":{\"4\":2,\"5\":8,\"6\":5,\"7\":3,\"8\":2,\"9\":2,\"10\":2,\"11\":4,\"12\":4,\"13\":4,\"14\":4,\"16\":2,\"17\":2,\"18\":2,\"19\":6,\"20\":2,\"22\":3}}],[\"重复某种模式也是可以的\",{\"1\":{\"30\":1}}],[\"重复写同样的值非常麻烦\",{\"1\":{\"30\":1}}],[\"第三列和第六列为80px\",{\"1\":{\"30\":1}}],[\"第二行\",{\"1\":{\"40\":1}}],[\"第二列\",{\"1\":{\"40\":1}}],[\"第二列的宽度\",{\"1\":{\"30\":1}}],[\"第二列的宽度是第三列的一半\",{\"1\":{\"30\":1}}],[\"第二列和第五列为20px\",{\"1\":{\"30\":1}}],[\"第二个参数是所要重复的值\",{\"1\":{\"30\":1}}],[\"第一列\",{\"1\":{\"40\":1}}],[\"第一列的宽度为150像素\",{\"1\":{\"30\":1}}],[\"第一列和第四列的宽度为100px\",{\"1\":{\"30\":1}}],[\"第一个参数是重复的次数\",{\"1\":{\"30\":1}}],[\"第一行在下方\",{\"1\":{\"9\":1}}],[\"第一行在上方\",{\"1\":{\"9\":1}}],[\"接受两个参数\",{\"1\":{\"30\":1}}],[\"接着就要划分行和列\",{\"1\":{\"30\":1}}],[\"改写如下\",{\"1\":{\"30\":1}}],[\"简化重复的值\",{\"1\":{\"30\":1}}],[\"简称\",{\"1\":{\"6\":2}}],[\"函数产生一个长度范围\",{\"1\":{\"30\":1}}],[\"函数\",{\"1\":{\"30\":1}}],[\"这与下面的代码效果完全一样\",{\"1\":{\"39\":1}}],[\"这四个属性的值还可以使用span关键字\",{\"1\":{\"39\":1}}],[\"这四个属性的值\",{\"1\":{\"39\":1}}],[\"这个属性的默认值是row\",{\"1\":{\"39\":1}}],[\"这个顺序由grid\",{\"1\":{\"33\":1}}],[\"这两个属性都可以取下面四个值\",{\"1\":{\"42\":1}}],[\"这两个属性之中\",{\"1\":{\"40\":1}}],[\"这两个属性的写法完全相同\",{\"1\":{\"34\":1,\"35\":1}}],[\"这两个值主要用于\",{\"1\":{\"33\":1}}],[\"这是因为3号项目默认跟着2号项目\",{\"1\":{\"33\":1}}],[\"这时它们的位置由容器的grid\",{\"1\":{\"39\":1}}],[\"这时会非常方便\",{\"1\":{\"30\":1}}],[\"这时可以使用auto\",{\"1\":{\"30\":1}}],[\"这时\",{\"1\":{\"30\":1,\"36\":1}}],[\"这部分先介绍容器属性\",{\"1\":{\"28\":1}}],[\"尤其网格很多时\",{\"1\":{\"30\":1}}],[\"也是只作用于单个项目\",{\"1\":{\"42\":1}}],[\"也可以使用span关键字\",{\"1\":{\"40\":1}}],[\"也可以使用百分比\",{\"1\":{\"30\":1}}],[\"也可以将它设成column\",{\"1\":{\"33\":1}}],[\"也不放大\",{\"1\":{\"16\":1}}],[\"template属性是grid\",{\"1\":{\"37\":1}}],[\"template\",{\"0\":{\"30\":2,\"32\":1,\"37\":1},\"1\":{\"30\":21,\"32\":7,\"36\":4,\"37\":6}}],[\"table\",{\"1\":{\"29\":1}}],[\"vertical\",{\"1\":{\"29\":1}}],[\"但只作用于单个项目\",{\"1\":{\"42\":1}}],[\"但也可以设成行内元素\",{\"1\":{\"29\":1}}],[\"但是某一个项目指定在第5行\",{\"1\":{\"36\":1}}],[\"但是容器的大小不确定\",{\"1\":{\"30\":1}}],[\"但是\",{\"1\":{\"22\":1,\"36\":1}}],[\"另一类定义在项目上面\",{\"1\":{\"28\":1}}],[\"共有5根水平网格线和5根垂直网格线\",{\"1\":{\"27\":1}}],[\"水平网格线划分出行\",{\"1\":{\"27\":1}}],[\"水平的深色区域就是\",{\"1\":{\"25\":1}}],[\"水平的主轴\",{\"1\":{\"6\":1}}],[\"line>\",{\"1\":{\"40\":4}}],[\"line\",{\"1\":{\"27\":1,\"30\":1}}],[\"layout\",{\"1\":{\"4\":1}}],[\"minmax\",{\"1\":{\"30\":4}}],[\"m列有m\",{\"1\":{\"27\":1}}],[\"m个单元格\",{\"1\":{\"26\":1}}],[\"main\",{\"1\":{\"6\":1,\"18\":1,\"32\":2}}],[\"x\",{\"1\":{\"26\":1,\"27\":1,\"30\":1,\"36\":1}}],[\"正常情况下\",{\"1\":{\"26\":1,\"27\":1}}],[\"单元格的内容头部对齐\",{\"1\":{\"34\":1}}],[\"单元格的内容左对齐\",{\"1\":{\"34\":1}}],[\"单元格的大小是固定的\",{\"1\":{\"30\":1}}],[\"单元格内部居中\",{\"1\":{\"34\":1,\"42\":1}}],[\"单元格\",{\"0\":{\"26\":1},\"1\":{\"26\":1}}],[\"单个项目占据的主轴空间叫做main\",{\"1\":{\"6\":1}}],[\"垂直网格线划分出列\",{\"1\":{\"27\":1}}],[\"垂直的深色区域就是\",{\"1\":{\"25\":1}}],[\"垂直区域称为\",{\"1\":{\"25\":1}}],[\"垂直居中就不容易实现\",{\"1\":{\"4\":1}}],[\"不大于1fr\",{\"1\":{\"30\":1}}],[\"不包含项目的子元素\",{\"1\":{\"24\":1}}],[\"不换行\",{\"1\":{\"9\":1}}],[\"内层的三个<div>元素就是项目\",{\"1\":{\"24\":1}}],[\"内核的浏览器\",{\"1\":{\"5\":1}}],[\"最外层的<div>元素就是容器\",{\"1\":{\"24\":1}}],[\"place\",{\"0\":{\"34\":1,\"35\":1,\"42\":1},\"1\":{\"34\":3,\"35\":3,\"42\":4}}],[\"p><\",{\"1\":{\"24\":3}}],[\"position属性\",{\"1\":{\"4\":1}}],[\"需要了解一些基本概念\",{\"1\":{\"23\":1}}],[\"学习\",{\"1\":{\"23\":1}}],[\"产生单元格\",{\"1\":{\"22\":1}}],[\"列间距\",{\"1\":{\"31\":1}}],[\"列宽和行高都是100px\",{\"1\":{\"30\":1}}],[\"列\",{\"1\":{\"22\":1,\"25\":2}}],[\"行间距\",{\"1\":{\"31\":1}}],[\"行和列的交叉区域\",{\"1\":{\"26\":1}}],[\"行和列\",{\"0\":{\"25\":1}}],[\"行\",{\"1\":{\"22\":1,\"25\":2}}],[\"行内元素也可以使用\",{\"1\":{\"5\":1}}],[\"针对轴线的位置\",{\"1\":{\"22\":1}}],[\"都指定为网格线的名字\",{\"1\":{\"39\":1}}],[\"都可以取下面这些值\",{\"1\":{\"34\":1,\"35\":1}}],[\"都可以指定容器内部多个项目的位置\",{\"1\":{\"22\":1}}],[\"都将等比例缩小\",{\"1\":{\"17\":1}}],[\"框架达到的效果\",{\"1\":{\"22\":1}}],[\"以便放置项目\",{\"1\":{\"36\":1}}],[\"以前\",{\"1\":{\"22\":1}}],[\"以下6个属性设置在项目上\",{\"1\":{\"14\":1}}],[\"以下6个属性设置在容器上\",{\"1\":{\"7\":1}}],[\"做出各种各样的布局\",{\"1\":{\"22\":1}}],[\"可以在一行容纳所有单元格\",{\"1\":{\"30\":1}}],[\"可以使用repeat\",{\"1\":{\"30\":1}}],[\"可以看作是二维布局\",{\"1\":{\"22\":1}}],[\"可以看作是一维布局\",{\"1\":{\"22\":1}}],[\"可以任意组合不同的网格\",{\"1\":{\"22\":1}}],[\"可覆盖align\",{\"1\":{\"20\":1}}],[\"网格线的名称\",{\"1\":{\"30\":1}}],[\"网格线\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"网格布局允许指定\",{\"1\":{\"32\":1}}],[\"网格布局允许同一根线有多个名字\",{\"1\":{\"30\":1}}],[\"网格布局提供了fr关键字\",{\"1\":{\"30\":1}}],[\"网格布局\",{\"1\":{\"22\":1}}],[\"网页布局\",{\"1\":{\"4\":1}}],[\"概述\",{\"0\":{\"22\":1}}],[\"其他项目都没有指定位置\",{\"1\":{\"39\":1}}],[\"其他项目都为1\",{\"1\":{\"16\":1,\"17\":1}}],[\"其他都与align\",{\"1\":{\"20\":1}}],[\"而不是单独写三个分离的属性\",{\"1\":{\"19\":1}}],[\"建议优先使用这个属性\",{\"1\":{\"19\":1}}],[\">\",{\"1\":{\"19\":3}}],[\"后两个属性可选\",{\"1\":{\"19\":1}}],[\"和\",{\"1\":{\"19\":2,\"22\":1}}],[\"和垂直的交叉轴\",{\"1\":{\"6\":1}}],[\"计算主轴是否有多余空间\",{\"1\":{\"18\":1}}],[\"负值对该属性无效\",{\"1\":{\"17\":1}}],[\"当空间不足时\",{\"1\":{\"17\":1}}],[\"该元素内部采用网格布局\",{\"1\":{\"29\":1}}],[\"该项目将缩小\",{\"1\":{\"17\":1}}],[\"该属性有两个快捷值\",{\"1\":{\"19\":1}}],[\"该属性可能取6个值\",{\"1\":{\"13\":1,\"20\":1}}],[\"该属性不起作用\",{\"1\":{\"13\":1}}],[\"则浏览器认为与第一个值相等\",{\"1\":{\"34\":1}}],[\"则起始位置的水平网格线和垂直网格线叫做header\",{\"1\":{\"32\":1}}],[\"则使用z\",{\"1\":{\"39\":1}}],[\"则使用\",{\"1\":{\"32\":1}}],[\"则等同于stretch\",{\"1\":{\"20\":1}}],[\"则项目将占据固定空间\",{\"1\":{\"18\":1}}],[\"则空间不足时\",{\"1\":{\"17\":1}}],[\"则前者占据的剩余空间将比其他项多一倍\",{\"1\":{\"16\":1}}],[\"则它们将等分剩余空间\",{\"1\":{\"16\":1}}],[\"0\",{\"1\":{\"16\":1,\"19\":2}}],[\"即左右边框\",{\"1\":{\"39\":1}}],[\"即上边框是第一根水平网格线\",{\"1\":{\"39\":1}}],[\"即\",{\"1\":{\"33\":1}}],[\"即下图数字的顺序\",{\"1\":{\"33\":1}}],[\"即先填满第一行\",{\"1\":{\"33\":1}}],[\"即项目的本来大小\",{\"1\":{\"18\":1}}],[\"即项目的排列方向\",{\"1\":{\"8\":1}}],[\"即如果空间不足\",{\"1\":{\"17\":1}}],[\"即如果存在剩余空间\",{\"1\":{\"16\":1}}],[\"<column\",{\"1\":{\"41\":2}}],[\"<row\",{\"1\":{\"41\":2}}],[\"<end\",{\"1\":{\"40\":2}}],[\"<start\",{\"1\":{\"40\":2}}],[\"<justify\",{\"1\":{\"34\":1,\"35\":1,\"42\":1}}],[\"<align\",{\"1\":{\"34\":1,\"35\":1,\"42\":1}}],[\"<grid\",{\"1\":{\"31\":2}}],[\"<div><p>3<\",{\"1\":{\"24\":1}}],[\"<div><p>2<\",{\"1\":{\"24\":1}}],[\"<div><p>1<\",{\"1\":{\"24\":1}}],[\"<div>\",{\"1\":{\"24\":1}}],[\"<\",{\"1\":{\"19\":3,\"24\":1}}],[\"<length>\",{\"1\":{\"18\":1}}],[\"<number>\",{\"1\":{\"16\":1,\"17\":1}}],[\"<integer>\",{\"1\":{\"15\":1}}],[\"<flex\",{\"1\":{\"10\":2}}],[\"排列越靠前\",{\"1\":{\"15\":1}}],[\"数值越小\",{\"1\":{\"15\":1}}],[\"order属性定义项目的排列顺序\",{\"1\":{\"15\":1}}],[\"order属性\",{\"0\":{\"15\":1}}],[\"order\",{\"1\":{\"14\":1,\"15\":1}}],[\"四\",{\"0\":{\"14\":1,\"38\":1}}],[\"每个区域的起始网格线\",{\"1\":{\"32\":1}}],[\"每个项目两侧的间隔相等\",{\"1\":{\"11\":1,\"35\":1}}],[\"每根轴线两侧的间隔都相等\",{\"1\":{\"13\":1}}],[\"与交叉轴两端对齐\",{\"1\":{\"13\":1}}],[\"与交叉轴的中点对齐\",{\"1\":{\"13\":1}}],[\"与交叉轴的终点对齐\",{\"1\":{\"13\":1}}],[\"与交叉轴的起点对齐\",{\"1\":{\"13\":1}}],[\"与边框的交叉点\",{\"1\":{\"6\":1}}],[\"6\",{\"0\":{\"13\":1,\"20\":1,\"34\":1},\"1\":{\"30\":1}}],[\"将占满整个容器的高度\",{\"1\":{\"12\":1}}],[\"交叉轴的中点对齐\",{\"1\":{\"12\":1}}],[\"交叉轴的终点对齐\",{\"1\":{\"12\":1}}],[\"交叉轴的起点对齐\",{\"1\":{\"12\":1}}],[\"交叉轴的开始位置叫做cross\",{\"1\":{\"6\":1}}],[\"具体方法就是指定项目的四个边框\",{\"1\":{\"39\":1}}],[\"具体的对齐方式与交叉轴的方向有关\",{\"1\":{\"12\":1}}],[\"具体对齐方式与轴的方向有关\",{\"1\":{\"11\":1}}],[\"50px\",{\"1\":{\"36\":1}}],[\"5\",{\"0\":{\"12\":1,\"19\":1,\"33\":1},\"1\":{\"30\":2}}],[\"所以会采用默认位置\",{\"1\":{\"39\":1}}],[\"所以会排在2号项目后面\",{\"1\":{\"33\":1}}],[\"所以这里就不详细介绍这两个属性了\",{\"1\":{\"37\":1}}],[\"所以3号项目在第一列\",{\"1\":{\"33\":1}}],[\"所以3号项目就会紧跟在1号项目的后面\",{\"1\":{\"33\":1}}],[\"所以\",{\"1\":{\"11\":1,\"13\":1,\"35\":1}}],[\"居中\",{\"1\":{\"11\":1}}],[\"右边框是第四根垂直网格线\",{\"1\":{\"39\":1}}],[\"右边框所在的垂直网格线\",{\"1\":{\"39\":1}}],[\"右边栏设为30\",{\"1\":{\"30\":1}}],[\"右对齐\",{\"1\":{\"11\":1}}],[\"右键打开git\",{\"1\":{\"3\":1}}],[\"下边框是第二根水平网格线\",{\"1\":{\"39\":1}}],[\"下边框所在的水平网格线\",{\"1\":{\"39\":1}}],[\"下面是justify\",{\"1\":{\"42\":1}}],[\"下面是一个例子\",{\"1\":{\"34\":1,\"35\":1,\"40\":1,\"41\":1,\"42\":1}}],[\"下面是一个布局实例\",{\"1\":{\"32\":1}}],[\"下面这些属性定义在项目上面\",{\"1\":{\"38\":1}}],[\"下面的例子是指定四个边框位置的效果\",{\"1\":{\"39\":1}}],[\"下面的例子里面\",{\"1\":{\"36\":1}}],[\"下面的例子让1号项目和2号项目各占据两个单元格\",{\"1\":{\"33\":1}}],[\"下面的图都以justify\",{\"1\":{\"35\":1}}],[\"下面假设交叉轴从上到下\",{\"1\":{\"12\":1}}],[\"下面假设主轴为从左到右\",{\"1\":{\"11\":1}}],[\"下一篇文章给出常见布局的\",{\"1\":{\"4\":1}}],[\"404\",{\"1\":{\"43\":1}}],[\"4号项目在第二列\",{\"1\":{\"33\":1}}],[\"4\",{\"0\":{\"11\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":2,\"19\":1,\"20\":1,\"27\":1,\"32\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":2},\"1\":{\"27\":2,\"30\":1,\"39\":2}}],[\"换行\",{\"1\":{\"9\":2}}],[\"n行有n\",{\"1\":{\"27\":1}}],[\"n行和m列会产生n\",{\"1\":{\"26\":1}}],[\"not\",{\"1\":{\"43\":1}}],[\"none\",{\"1\":{\"19\":2}}],[\"nowrap\",{\"1\":{\"9\":2,\"10\":1}}],[\"npm\",{\"1\":{\"2\":1}}],[\"如果产生了项目的重叠\",{\"1\":{\"39\":1}}],[\"如果不指定这两个属性\",{\"1\":{\"36\":1}}],[\"如果省略第二个值\",{\"1\":{\"34\":1,\"35\":1,\"42\":1}}],[\"如果将设置改为column\",{\"1\":{\"33\":1}}],[\"如果某些区域不需要利用\",{\"1\":{\"32\":1}}],[\"如果grid\",{\"1\":{\"31\":1}}],[\"如果两列的宽度分别为1fr和2fr\",{\"1\":{\"30\":1}}],[\"如果希望每一行\",{\"1\":{\"30\":1}}],[\"如果没有父元素\",{\"1\":{\"20\":1}}],[\"如果一个项目的flex\",{\"1\":{\"16\":1,\"17\":1}}],[\"如果一条轴线排不下\",{\"1\":{\"9\":1}}],[\"如果有的话\",{\"1\":{\"16\":1}}],[\"如果所有项目的flex\",{\"1\":{\"16\":1,\"17\":1}}],[\"如果项目只有一根轴线\",{\"1\":{\"13\":1}}],[\"如果项目未设置高度或设为auto\",{\"1\":{\"12\":1}}],[\"如何换行\",{\"1\":{\"9\":1}}],[\"上下边框\",{\"1\":{\"39\":1}}],[\"上边框所在的水平网格线\",{\"1\":{\"39\":1}}],[\"上中下\",{\"1\":{\"34\":1,\"35\":1,\"42\":1}}],[\"上例是3\",{\"1\":{\"30\":1}}],[\"上面三个属性名的grid\",{\"1\":{\"31\":1}}],[\"上面一段\",{\"1\":{\"31\":1}}],[\"上面的代码用repeat\",{\"1\":{\"30\":1}}],[\"上面代码的效果如下\",{\"1\":{\"33\":2}}],[\"上面代码设置了column以后\",{\"1\":{\"33\":1}}],[\"上面代码将9个单元格分成a\",{\"1\":{\"32\":1}}],[\"上面代码将左边栏设为70\",{\"1\":{\"30\":1}}],[\"上面代码先划分出9个单元格\",{\"1\":{\"32\":1}}],[\"上面代码表示\",{\"1\":{\"30\":1,\"34\":2,\"39\":1}}],[\"上面代码表示两个相同宽度的列\",{\"1\":{\"30\":1}}],[\"上面代码表示每列宽度100px\",{\"1\":{\"30\":1}}],[\"上面代码定义了6列\",{\"1\":{\"30\":1}}],[\"上面代码指定\",{\"1\":{\"39\":1}}],[\"上面代码指定新增的行高统一为50px\",{\"1\":{\"36\":1}}],[\"上面代码指定网格布局为3行\",{\"1\":{\"30\":1}}],[\"上面代码指定了一个三行三列的网格\",{\"1\":{\"30\":1}}],[\"上面代码指定div是一个行内元素\",{\"1\":{\"29\":1}}],[\"上面代码中\",{\"1\":{\"24\":1,\"30\":2,\"31\":1,\"32\":2,\"39\":1,\"40\":3,\"41\":1}}],[\"上图会先填满第一列\",{\"1\":{\"33\":1}}],[\"上图会先填满第一行\",{\"1\":{\"33\":1}}],[\"上图是display\",{\"1\":{\"29\":2}}],[\"上图是一个\",{\"1\":{\"27\":1}}],[\"上图中\",{\"1\":{\"25\":1,\"33\":1,\"39\":1}}],[\"上图这样的布局\",{\"1\":{\"22\":1}}],[\"上\",{\"1\":{\"9\":1}}],[\"轴线占满整个交叉轴\",{\"1\":{\"13\":1}}],[\"轴线之间的间隔比轴线与边框的间隔大一倍\",{\"1\":{\"13\":1}}],[\"轴线之间的间隔平均分布\",{\"1\":{\"13\":1}}],[\"轴线\",{\"1\":{\"9\":1}}],[\"又称\",{\"1\":{\"9\":1}}],[\"默认跨越一个网格\",{\"1\":{\"40\":1}}],[\"默认的放置顺序是\",{\"1\":{\"33\":1}}],[\"默认为1\",{\"1\":{\"17\":1}}],[\"默认为0\",{\"1\":{\"15\":1,\"16\":1}}],[\"默认\",{\"1\":{\"9\":1}}],[\"默认情况下\",{\"1\":{\"9\":1,\"29\":1}}],[\"默认值是row\",{\"1\":{\"33\":1}}],[\"默认值为auto\",{\"1\":{\"20\":1}}],[\"默认值为0\",{\"1\":{\"19\":1}}],[\"默认值为row\",{\"1\":{\"10\":1}}],[\"默认值\",{\"1\":{\"8\":1,\"11\":1,\"12\":1,\"13\":1,\"34\":1,\"42\":1}}],[\"2fr\",{\"1\":{\"30\":1}}],[\"20px\",{\"1\":{\"30\":1,\"31\":4}}],[\"2\",{\"0\":{\"9\":1,\"16\":1,\"24\":1,\"25\":2,\"26\":1,\"27\":1,\"30\":1,\"40\":1},\"1\":{\"9\":1,\"30\":2,\"39\":4,\"40\":4}}],[\"起点在下沿\",{\"1\":{\"8\":1}}],[\"起点在上沿\",{\"1\":{\"8\":1}}],[\"起点在右端\",{\"1\":{\"8\":1}}],[\"起点在左端\",{\"1\":{\"8\":1}}],[\"主轴为垂直方向\",{\"1\":{\"8\":2}}],[\"主轴为水平方向\",{\"1\":{\"8\":2}}],[\"主轴的开始位置\",{\"1\":{\"6\":1}}],[\"||\",{\"1\":{\"10\":1,\"19\":1}}],[\"|\",{\"1\":{\"8\":3,\"9\":2,\"11\":4,\"12\":4,\"13\":5,\"18\":1,\"19\":1,\"20\":5,\"34\":6,\"35\":12,\"42\":6}}],[\"r4\",{\"1\":{\"30\":1}}],[\"r3\",{\"1\":{\"30\":1}}],[\"r2\",{\"1\":{\"30\":1}}],[\"r1\",{\"1\":{\"30\":1}}],[\"repeat\",{\"1\":{\"30\":8}}],[\"reverse\",{\"1\":{\"8\":4,\"9\":2}}],[\"row属性是grid\",{\"1\":{\"40\":1}}],[\"row情况下\",{\"1\":{\"33\":1}}],[\"rows和grid\",{\"1\":{\"37\":1}}],[\"rows完全相同\",{\"1\":{\"36\":1}}],[\"rows属性用来设置\",{\"1\":{\"36\":1}}],[\"rows属性里面\",{\"1\":{\"30\":1}}],[\"rows属性定义每一行的行高\",{\"1\":{\"30\":1}}],[\"rows\",{\"0\":{\"30\":1,\"36\":1},\"1\":{\"30\":4,\"32\":1,\"36\":2,\"37\":2}}],[\"row\",{\"0\":{\"31\":1,\"39\":2,\"40\":1},\"1\":{\"8\":4,\"25\":1,\"30\":1,\"31\":6,\"33\":1,\"39\":5,\"40\":9,\"41\":2}}],[\"run\",{\"1\":{\"2\":1}}],[\"1占据左上角第一个网格\",{\"1\":{\"40\":1}}],[\"1占据的区域\",{\"1\":{\"40\":1}}],[\"1占据第一行\",{\"1\":{\"40\":1}}],[\"1号项目位于e区域\",{\"1\":{\"41\":1}}],[\"1号项目的左边框距离右边框跨越2个网格\",{\"1\":{\"39\":1}}],[\"1号项目的左边框是第二根垂直网格线\",{\"1\":{\"39\":1}}],[\"1号项目后面的位置是空的\",{\"1\":{\"33\":1}}],[\"12\",{\"1\":{\"30\":1}}],[\"150px\",{\"1\":{\"30\":1}}],[\"1fr\",{\"1\":{\"30\":8}}],[\"100px\",{\"1\":{\"30\":16,\"32\":6,\"36\":6}}],[\"1根垂直网格线\",{\"1\":{\"27\":1}}],[\"1根水平网格线\",{\"1\":{\"27\":1}}],[\"1\",{\"0\":{\"8\":1,\"15\":1,\"24\":1,\"29\":1,\"39\":1},\"1\":{\"9\":1,\"17\":1,\"19\":3,\"30\":1,\"39\":6,\"40\":15,\"41\":4,\"42\":1}}],[\"30\",{\"1\":{\"30\":1}}],[\"3列\",{\"1\":{\"30\":1,\"36\":1}}],[\"33\",{\"1\":{\"30\":16}}],[\"3行3列会产生9个单元格\",{\"1\":{\"26\":1}}],[\"3\",{\"0\":{\"8\":1,\"9\":1,\"10\":2,\"11\":1,\"12\":1,\"13\":1,\"17\":1,\"26\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"41\":1},\"1\":{\"9\":1,\"30\":3,\"39\":1,\"40\":4,\"41\":2}}],[\"justify\",{\"0\":{\"11\":1,\"34\":1,\"35\":1,\"42\":1},\"1\":{\"7\":1,\"11\":2,\"34\":3,\"35\":2,\"42\":3}}],[\"width\",{\"1\":{\"30\":1}}],[\"wrapper\",{\"1\":{\"30\":1}}],[\"wrap>\",{\"1\":{\"10\":1}}],[\"wrap属性的简写形式\",{\"1\":{\"10\":1}}],[\"wrap属性定义\",{\"1\":{\"9\":1}}],[\"wrap属性\",{\"0\":{\"9\":1}}],[\"wrap\",{\"1\":{\"7\":1,\"9\":5}}],[\"webkit前缀\",{\"1\":{\"5\":1}}],[\"webkit\",{\"1\":{\"5\":2}}],[\"三\",{\"0\":{\"7\":1,\"28\":1}}],[\"结束位置叫做cross\",{\"1\":{\"6\":1}}],[\"结束位置叫做main\",{\"1\":{\"6\":1}}],[\"叫做main\",{\"1\":{\"6\":1}}],[\"a\",{\"1\":{\"32\":5}}],[\"area属性还可用作grid\",{\"1\":{\"41\":1}}],[\"area属性指定项目放在哪一个区域\",{\"1\":{\"41\":1}}],[\"area\",{\"0\":{\"41\":1},\"1\":{\"32\":1,\"41\":3}}],[\"areas这三个属性的合并简写形式\",{\"1\":{\"37\":1}}],[\"areas属性用于定义区域\",{\"1\":{\"32\":1}}],[\"areas\",{\"0\":{\"32\":1},\"1\":{\"32\":4,\"37\":1}}],[\"around\",{\"1\":{\"11\":2,\"13\":2,\"35\":4}}],[\"auto关键字表示由浏览器自己决定长度\",{\"1\":{\"30\":1}}],[\"auto\",{\"0\":{\"33\":1,\"36\":2},\"1\":{\"18\":2,\"19\":4,\"20\":1,\"30\":8,\"33\":6,\"36\":3,\"37\":3,\"39\":1}}],[\"align和column\",{\"1\":{\"29\":1}}],[\"align\",{\"0\":{\"12\":1,\"13\":1,\"20\":1,\"34\":1,\"35\":1,\"42\":1},\"1\":{\"7\":2,\"12\":2,\"13\":2,\"14\":1,\"20\":2,\"34\":3,\"35\":3,\"42\":2}}],[\"align属性将失效\",{\"1\":{\"5\":1}}],[\"axis\",{\"1\":{\"6\":2}}],[\"index属性指定项目的重叠顺序\",{\"1\":{\"39\":1}}],[\"inline\",{\"1\":{\"5\":1,\"29\":3}}],[\"i\",{\"1\":{\"32\":2}}],[\"items>\",{\"1\":{\"34\":2}}],[\"items属性的用法完全一致\",{\"1\":{\"42\":2}}],[\"items属性的合并简写形式\",{\"1\":{\"34\":1}}],[\"items属性和justify\",{\"1\":{\"34\":1}}],[\"items属性是align\",{\"1\":{\"34\":1}}],[\"items属性设置单元格内容的垂直位置\",{\"1\":{\"34\":1}}],[\"items属性设置单元格内容的水平位置\",{\"1\":{\"34\":1}}],[\"items属性完全一致\",{\"1\":{\"20\":1}}],[\"items属性定义项目在交叉轴上如何对齐\",{\"1\":{\"12\":1}}],[\"items属性\",{\"0\":{\"12\":1},\"1\":{\"20\":2}}],[\"items\",{\"0\":{\"34\":3},\"1\":{\"7\":1,\"12\":1,\"34\":6}}],[\"item\",{\"1\":{\"6\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"24\":1,\"39\":5,\"40\":6,\"41\":3,\"42\":2}}],[\"它们的写法与grid\",{\"1\":{\"36\":1}}],[\"它们也存在重大区别\",{\"1\":{\"22\":1}}],[\"它接受两个参数\",{\"1\":{\"30\":1}}],[\"它将网页划分成一个个网格\",{\"1\":{\"22\":1}}],[\"它可以设为跟width或height属性一样的值\",{\"1\":{\"18\":1}}],[\"它可能取5个值\",{\"1\":{\"11\":1,\"12\":1}}],[\"它可能取三个值\",{\"1\":{\"9\":1}}],[\"它可能有4个值\",{\"1\":{\"8\":1}}],[\"它的默认值为auto\",{\"1\":{\"18\":1}}],[\"它的所有子元素自动成为容器成员\",{\"1\":{\"6\":1}}],[\"它对于那些特殊布局非常不方便\",{\"1\":{\"4\":1}}],[\"称为项目属性\",{\"1\":{\"28\":1}}],[\"称为容器属性\",{\"1\":{\"28\":1}}],[\"称为\",{\"1\":{\"6\":2,\"24\":2,\"26\":1,\"27\":1}}],[\"采用网格布局的区域\",{\"1\":{\"24\":1}}],[\"采用\",{\"1\":{\"6\":1}}],[\"基本上等于该列单元格的最大宽度\",{\"1\":{\"30\":1}}],[\"基本概念\",{\"0\":{\"6\":1,\"23\":1}}],[\"基于盒状模型\",{\"1\":{\"4\":1}}],[\"二\",{\"0\":{\"6\":1,\"23\":1}}],[\"c三个区域\",{\"1\":{\"32\":1}}],[\"c\",{\"1\":{\"32\":5}}],[\"c4\",{\"1\":{\"30\":1}}],[\"c3\",{\"1\":{\"30\":1}}],[\"c2\",{\"1\":{\"30\":1}}],[\"c1\",{\"1\":{\"30\":1}}],[\"cell\",{\"1\":{\"26\":1,\"29\":1}}],[\"center\",{\"1\":{\"11\":2,\"12\":2,\"13\":2,\"20\":1,\"34\":3,\"35\":3,\"42\":5}}],[\"column属性是grid\",{\"1\":{\"40\":1}}],[\"columns和grid\",{\"1\":{\"36\":1}}],[\"columns属性对于网页布局非常有用\",{\"1\":{\"30\":1}}],[\"columns属性和grid\",{\"1\":{\"30\":1,\"36\":1}}],[\"columns属性定义每一列的列宽\",{\"1\":{\"30\":1}}],[\"columns\",{\"0\":{\"30\":1,\"36\":1},\"1\":{\"30\":12,\"32\":1,\"36\":1,\"37\":3}}],[\"column\",{\"0\":{\"31\":1,\"39\":2,\"40\":1},\"1\":{\"8\":4,\"25\":1,\"31\":6,\"33\":2,\"39\":10,\"40\":9,\"41\":2}}],[\"content>\",{\"1\":{\"35\":2}}],[\"content属性的合并简写形式\",{\"1\":{\"35\":1}}],[\"content属性的图完全一样\",{\"1\":{\"35\":1}}],[\"content属性和justify\",{\"1\":{\"35\":1}}],[\"content属性是align\",{\"1\":{\"35\":1}}],[\"content属性是整个内容区域的垂直位置\",{\"1\":{\"35\":1}}],[\"content属性是整个内容区域在容器里面的水平位置\",{\"1\":{\"35\":1}}],[\"content属性为例\",{\"1\":{\"35\":1}}],[\"content属性定义了多根轴线的对齐方式\",{\"1\":{\"13\":1}}],[\"content属性定义了项目在主轴上的对齐方式\",{\"1\":{\"11\":1}}],[\"content属性\",{\"0\":{\"11\":1,\"13\":1}}],[\"content\",{\"0\":{\"35\":3},\"1\":{\"7\":2,\"11\":1,\"13\":1,\"35\":4}}],[\"container\",{\"1\":{\"6\":1,\"24\":1,\"30\":7,\"31\":2,\"32\":1,\"34\":3,\"35\":1,\"36\":1}}],[\"cross\",{\"1\":{\"6\":1}}],[\"clear和vertical\",{\"1\":{\"5\":1}}],[\"css\",{\"1\":{\"4\":1,\"22\":2,\"31\":1}}],[\"子元素的float\",{\"1\":{\"5\":1}}],[\"设为row\",{\"1\":{\"33\":1}}],[\"设为网格布局以后\",{\"1\":{\"29\":1}}],[\"设为\",{\"1\":{\"5\":1}}],[\"注意\",{\"1\":{\"5\":1,\"24\":1,\"29\":1,\"32\":1}}],[\"span\",{\"1\":{\"39\":2,\"40\":2}}],[\"space\",{\"1\":{\"11\":4,\"13\":4,\"35\":11}}],[\"sidebar\",{\"1\":{\"32\":1}}],[\"size\",{\"1\":{\"6\":2,\"18\":1}}],[\"self>\",{\"1\":{\"42\":2}}],[\"self属性会认为这两个值相等\",{\"1\":{\"42\":1}}],[\"self属性的合并简写形式\",{\"1\":{\"42\":1}}],[\"self属性和justify\",{\"1\":{\"42\":1}}],[\"self属性是align\",{\"1\":{\"42\":1}}],[\"self属性设置单元格内容的垂直位置\",{\"1\":{\"42\":1}}],[\"self属性设置单元格内容的水平位置\",{\"1\":{\"42\":1}}],[\"self属性允许单个项目有与其他项目不一样的对齐方式\",{\"1\":{\"20\":1}}],[\"self属性\",{\"0\":{\"20\":1}}],[\"self\",{\"0\":{\"42\":3},\"1\":{\"14\":1,\"20\":1,\"42\":6}}],[\"stretch\",{\"1\":{\"12\":2,\"13\":2,\"20\":1,\"34\":3,\"35\":3,\"42\":3}}],[\"start的例子\",{\"1\":{\"42\":1}}],[\"start>\",{\"1\":{\"41\":2}}],[\"start和grid\",{\"1\":{\"40\":1}}],[\"start属性和grid\",{\"1\":{\"40\":1}}],[\"start属性\",{\"1\":{\"39\":2}}],[\"start\",{\"0\":{\"39\":2},\"1\":{\"6\":2,\"11\":2,\"12\":2,\"13\":2,\"20\":1,\"32\":2,\"34\":6,\"35\":3,\"39\":6,\"40\":2,\"41\":2,\"42\":4}}],[\"safari\",{\"1\":{\"5\":1}}],[\"shrink属性为0\",{\"1\":{\"17\":1}}],[\"shrink属性都为1\",{\"1\":{\"17\":1}}],[\"shrink属性定义了项目的缩小比例\",{\"1\":{\"17\":1}}],[\"shrink属性\",{\"0\":{\"17\":1}}],[\"shrink\",{\"1\":{\"14\":1,\"17\":1,\"19\":2}}],[\"sh\",{\"1\":{\"3\":1}}],[\"必须加上\",{\"1\":{\"5\":1}}],[\"任何一个容器都可以指定为\",{\"1\":{\"5\":1}}],[\"用来为盒状模型提供最大的灵活性\",{\"1\":{\"5\":1}}],[\"弹性布局\",{\"1\":{\"5\":1}}],[\"意为\",{\"1\":{\"5\":1,\"30\":1}}],[\"的float\",{\"1\":{\"29\":1}}],[\"的网格\",{\"1\":{\"27\":1}}],[\"的单元格\",{\"1\":{\"22\":1}}],[\"的缩写\",{\"1\":{\"5\":1,\"30\":1}}],[\"的一个重点应用\",{\"1\":{\"4\":1}}],[\"b03532\",{\"1\":{\"40\":2}}],[\"background\",{\"1\":{\"40\":2}}],[\"basis的简写\",{\"1\":{\"19\":1}}],[\"basis属性定义了在分配多余空间之前\",{\"1\":{\"18\":1}}],[\"basis属性\",{\"0\":{\"18\":1}}],[\"basis\",{\"1\":{\"14\":1,\"18\":1,\"19\":1}}],[\"baseline\",{\"1\":{\"12\":2,\"20\":1}}],[\"bash\",{\"1\":{\"3\":1}}],[\"b\",{\"1\":{\"32\":5}}],[\"block\",{\"1\":{\"29\":1}}],[\"between\",{\"1\":{\"11\":2,\"13\":2,\"35\":3}}],[\"box\",{\"1\":{\"5\":4,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1}}],[\"一些项目的指定位置\",{\"1\":{\"36\":1}}],[\"一个区域由单个或多个单元格组成\",{\"1\":{\"32\":1}}],[\"一类定义在容器上面\",{\"1\":{\"28\":1}}],[\"一\",{\"0\":{\"5\":1,\"22\":1}}],[\"本文介绍它的语法\",{\"1\":{\"4\":1}}],[\"比如网格只有3列\",{\"1\":{\"36\":1}}],[\"比如三行就有四根水平网格线\",{\"1\":{\"27\":1}}],[\"比如上面代码的<p>元素就不是项目\",{\"1\":{\"24\":1}}],[\"比如350px\",{\"1\":{\"18\":1}}],[\"比如\",{\"1\":{\"4\":1,\"26\":1,\"30\":1,\"32\":1}}],[\"+\",{\"1\":{\"4\":2,\"27\":2,\"40\":2}}],[\"属性\",{\"0\":{\"29\":1,\"30\":2,\"31\":3,\"32\":1,\"33\":1,\"34\":3,\"35\":3,\"36\":2,\"37\":2,\"39\":4,\"40\":2,\"41\":1,\"42\":3},\"1\":{\"4\":1}}],[\"依赖\",{\"1\":{\"4\":1}}],[\"是最强大的\",{\"1\":{\"22\":1}}],[\"是\",{\"1\":{\"4\":1,\"5\":1}}],[\"阮一峰\",{\"1\":{\"4\":1,\"21\":1}}],[\"作者\",{\"1\":{\"4\":1,\"21\":1}}],[\"布局实例\",{\"1\":{\"30\":1}}],[\"布局只对项目生效\",{\"1\":{\"24\":1}}],[\"布局之前\",{\"1\":{\"23\":1}}],[\"布局强大\",{\"1\":{\"22\":1}}],[\"布局远比\",{\"1\":{\"22\":1}}],[\"布局则是将容器划分成\",{\"1\":{\"22\":1}}],[\"布局是轴线布局\",{\"1\":{\"22\":1}}],[\"布局是什么\",{\"0\":{\"5\":1}}],[\"布局有一定的相似性\",{\"1\":{\"22\":1}}],[\"布局与\",{\"1\":{\"22\":1}}],[\"布局方案\",{\"1\":{\"22\":1}}],[\"布局的属性分成两类\",{\"1\":{\"28\":1}}],[\"布局的拿手好戏\",{\"1\":{\"22\":1}}],[\"布局的元素\",{\"1\":{\"6\":1}}],[\"布局的传统解决方案\",{\"1\":{\"4\":1}}],[\"布局以后\",{\"1\":{\"5\":1}}],[\"布局将成为未来布局的首选方案\",{\"1\":{\"4\":1}}],[\"布局\",{\"0\":{\"4\":1,\"21\":1},\"1\":{\"5\":2}}],[\"输入\",{\"1\":{\"3\":1}}],[\"项目item\",{\"1\":{\"40\":3}}],[\"项目属性\",{\"0\":{\"38\":1}}],[\"项目与容器边框之间也是同样长度的间隔\",{\"1\":{\"35\":1}}],[\"项目与容器边框之间没有间隔\",{\"1\":{\"35\":1}}],[\"项目与项目的间隔相等\",{\"1\":{\"35\":2}}],[\"项目大小没有指定时\",{\"1\":{\"35\":1}}],[\"项目只能是容器的顶层子元素\",{\"1\":{\"24\":1}}],[\"项目所在\",{\"1\":{\"22\":1}}],[\"项目占据的主轴空间\",{\"1\":{\"18\":1}}],[\"项目的位置是可以指定的\",{\"1\":{\"39\":1}}],[\"项目的属性\",{\"0\":{\"14\":1}}],[\"项目的第一行文字的基线对齐\",{\"1\":{\"12\":1}}],[\"项目之间的间隔比项目与容器边框的间隔大一倍\",{\"1\":{\"35\":1}}],[\"项目之间的间隔比项目与边框的间隔大一倍\",{\"1\":{\"11\":1}}],[\"项目之间的间隔都相等\",{\"1\":{\"11\":1}}],[\"项目都排在一条线\",{\"1\":{\"9\":1}}],[\"项目默认沿主轴排列\",{\"1\":{\"6\":1}}],[\"项目\",{\"1\":{\"6\":2,\"22\":1,\"24\":1,\"29\":1}}],[\"项目更新\",{\"0\":{\"3\":1}}],[\"项目启动\",{\"0\":{\"2\":1}}],[\"d\",{\"1\":{\"32\":2}}],[\"div\",{\"1\":{\"29\":2}}],[\"div>\",{\"1\":{\"24\":4}}],[\"direction>\",{\"1\":{\"10\":1}}],[\"direction属性和flex\",{\"1\":{\"10\":1}}],[\"direction属性决定主轴的方向\",{\"1\":{\"8\":1}}],[\"direction属性\",{\"0\":{\"8\":1}}],[\"direction\",{\"1\":{\"7\":1,\"8\":1}}],[\"display\",{\"0\":{\"29\":1},\"1\":{\"4\":1,\"5\":4,\"29\":5,\"30\":8,\"32\":1,\"36\":1}}],[\"dense\",{\"1\":{\"33\":5,\"39\":1}}],[\"dense和column\",{\"1\":{\"33\":1,\"39\":1}}],[\"default\",{\"1\":{\"16\":1,\"17\":1,\"18\":1}}],[\"deploy\",{\"1\":{\"3\":1}}],[\"dev\",{\"1\":{\"2\":1}}],[\"docs\",{\"1\":{\"2\":1}}],[\"页面的标题\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,Mt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=St[s];e==="suggest"?self.postMessage([e,o,et(t,r,n)]):e==="search"?self.postMessage([e,o,tt(t,r,n)]):self.postMessage({suggestions:[e,o,et(t,r,n)],results:[e,o,tt(t,r,n)]})};
//# sourceMappingURL=index.js.map
